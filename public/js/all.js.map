{"version":3,"sources":["rest-adapter.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"all.js","sourcesContent":["// =============================\n// REST ADAPTER\n// =============================\n\t\nvar RestAdapter = {\n\n\t// GET\n\tindex: function(route) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'GET');\n\t\tajax.done(function(response) {\n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\tshow: function(route) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'GET');\n\t\tajax.done(function(response) {\n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\tedit: function(route) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'GET');\n\t\tajax.done(function(response) {\n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\tcreate: function(route) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'GET');\n\t\tajax.done(function(response) {\n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\t// POST\n\tstore: function(route, data) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'POST', data);\n\t\tajax.done(function(response) {\n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\t// PUT\n\tupdate: function(route, data) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'PATCH', data);\n\t\tajax.done(function(response) { \n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\t//DELETE \n\tdestroy: function(route) {\n\t\tvar deferred = $.Deferred();\n\t\tvar ajax = this.ajaxRequest(route, 'DELETE');\n\t\tajax.done(function(response) { \n\t\t\tdeferred.resolve(response);\n\t\t});\n\t\treturn deferred.promise();\n\t},\n\t// ajaxRequest METHOD\n\tajaxRequest: function(route, method, data) {\t\n\t\tvar response;\n\t\tvar deferred = $.Deferred();\n\n\t\t$.ajaxSetup({\n\t\t\theaders: { 'X-CSRF-Token' : $('meta[name=_token]').attr('content') }\n\t\t});\t\n\n\t\tvar ajax = $.ajax({\n\t\t\turl: route,\n\t\t\tmethod: method,\n\t\t\tdata: data,\n\t\t\tsuccess: function(response) {\n\t\t\t\tdeferred.resolve(response);\t\n\t\t\t},\n\t\t\terror: function(response) {\n\t\t\t\tdeferred.resolve({error: response.message, status: response.status});\n\t\t\t}\n\t\t});\n\t \treturn deferred.promise();\n\t}\n};\n","$(document).ready(function() {\n\n\t// =============================\n\t// BIND EVENTS \n\t// =============================\n\n\tvar bindEvents = (function() {\n\n\t\t// UPDATE A TASK TO BE COMPLETED\n\t\t$('.completed-task-switch').on('click', function() {\n\n\t\t\tvar _this = $(this);\n\t\t\tvar taskId = $(this).attr('data-taskId');\n\t\t\tvar url = '/dev.todoparrot.com/public/tasks/' + taskId;\n\n\t\t\tRestAdapter.update(url).then(function(response) {\n\t\t\t\tchangeTaskStatus(response.task, _this);\n\t\t\t});\n\t\t\t\n\t\t});\n\n\t\t// CREATE A NEW TASK\n\t\t$('#create-new-task').on('submit', function(e) {\n\t\t\te.preventDefault();\n\n\t\t\tvar data = {\n\t\t\t\tlistId: $(this).find('#list-id').val(),\n\t\t\t\tname: $(this).find('#name').val(),\n\t\t\t\tdescription: $(this).find('#description').val()\n\t\t\t};\n\n\t\t\tvar url = window.location.origin + '/dev.todoparrot.com/public/tasks';\n\n\t\t\tRestAdapter.store(url, data).then(function(response) {\n\t\t\t\tappendNewTask(response.task);\n\t\t\t\taddNoTasks();\n\t\t\t\tunbinder()\t\t\n\t\t\t\tbindEvents();\n\t\t\t});\n\n\t\t});\n\n\t\t// DELETE TASK\n\t\t$('.remove-task').on('click', function() {\n\n\t\t\tvar _this = $(this);\n\t\t\tvar taskId = $(this).attr('data-taskId');\n\t\t\tvar url = window.location.origin + '/dev.todoparrot.com/public/tasks/' + taskId;\n\t\t\t\n\t\t\tRestAdapter.destroy(url).then(function(response) {\n\t\t\t\t_this.parent().parent().remove();\n\t\t\t\tdisplayMessage(response.task.name + ' removed');\n\t\t\t\taddNoTasks();\n\t\t\t});\n\t\t\n\t\t});\n\n\n\t\t//sortable\n\t\tsortableList('/dev.todoparrot.com/public/sort-tasks');\n\n\t});\n\n\tbindEvents();\n\n\n\t// =============================\n\t// FUNCTIONS \n\t// =============================\n\n\tfunction unbinder() {\n\t\t$('*').unbind();\t\n\t\t$('#sortable').sortable('destroy');\n\n\t}\n\n\tfunction changeTaskStatus(task, $this) {\n\t\tif (task.done) {\n\t\t\t$this.find('#complete-task').hide();\n\t\t\t$this.find('#replace-task').show();\n\t\t\t$this.find('#replace-task').find('.text').text('Completed on: ' + task.updated_at);\n\t\t\tdisplayMessage(task.name + ' has been completed');\n\t\t} else {\n\t\t\t$this.find('#complete-task').show();\n\t\t\t$this.find('#replace-task').hide();\n\t\t\tdisplayMessage(task.name + ' status is now not completed');\n\t\t}\t\t\t\n\t} \n\n\tfunction appendNewTask(task) {\n\t\t\n\t\t$('#sortable').prepend('<li class=\"task-item\">'\n\t\t+\t'<div class=\"row\">'\n\t\t+\t\t'<span class=\"col-xs-1 glyphicon glyphicon-sort\"></span>'\n\t\t+\t\t'<h5 class=\"col-xs-4 \">' + task.name + '</h5>'\t\t\n\t\t+\t\t'<button class=\"remove-task col-xs-1 glyphicon glyphicon-remove\" data-taskid=' + task.id + '></button>'\n\t\t+\t\t'<div class=\"completed-task-switch col-xs-6\" data-taskid=' +  task.id +'>'\n\t\t+\t\t\t'<div id=\"replace-task\" style=\"display: none;\">'\n\t\t+\t\t\t\t'<p class=\"col-xs-7 text\">Completed on: ' + task.created_at + '</p>'\n\t\t+\t\t\t\t'<div id=\"replace-task-icon\" class=\"glyphicon glyphicon-wrench\"></div>'\n\t\t+\t\t\t'</div>'\n\t\t+\t\t\t'<div id=\"complete-task\" class=\"btn-mini glyphicon glyphicon-ok\" data-taskid=' + task.id + ' style=\"display: inline-block;\"></div>'\n\t\t+\t\t'</div>'\n\t\t+\t'</div>'\n\t\t+'</li>');\n\n\t\tdisplayMessage(task.name + ' has been created');\n\n\t} \n\n\tfunction displayMessage(message) {\n\n\t\t$('.message').remove();\n\n\t\t$('body').append('<div class=\"message\">'\n\t\t+\tmessage\t\n\t\t+'</div>');\n\n\t\tvar $message = $('.message');\n\n\t\tsetTimeout(function() {\n\t\t\t$message.fadeOut(200);\n\t\t}, 2000);\n\t}\n\n\tfunction addNoTasks() {\n\t\t$taskContainer = $('.tasks-container');\n\n\t\tif ($('.tasks-container').children().length === 0) {\n\t\t\ttext = $('.list-title').text();\n\t\t\t$taskContainer.append('<p class=\"no-tasks-message\">You have not created any tasks for ' + text + '! Just add one above...</p>');\t\n\t\t} else {\n\t\t\t$('.no-tasks-message').remove();\n\t\t}\n\t}\n\n\tfunction sortableList(route) {\n\n\t\tvar index;\n\t\t// SORT LIST ITEMS \n\t\t$('#sortable').sortable({\n\t\t\tstart: function(event, ui) {\n\t\t\t\tvar start_pos = ui.item.index();\n\t\t\t\tui.item.data('start_pos', start_pos);\n\t\t\t},\n\t\t\tchange: function(event, ui) {\n\t\t\t\tvar start_pos = ui.item.data('start_pos');\n\t\t\t\tindex = ui.placeholder.index();\n\t\t\t\tif (start_pos < index) {\n\t\t\t\t\t$('#sortable li:nth-child(' + index + ')').addClass('highlights');\n\t\t\t\t} else {\n\t\t\t\t\t$('#sortable li:eq(' + (index + 1) + ')').addClass('highlights');\n\t\t\t\t}\n\t\t\t},\n\t\t\tupdate: function(event, ui) {\n\t\t\t\ttaskOrder = [];\n\n\t\t\t\t$('#sortable li').removeClass('highlights');\n\n\t\t\t\t$('#sortable li').each(function(index, value) {\n\t\t\t\t\ttaskOrder.push({\n\t\t\t\t\t\ttaskId: $(value).attr('data-taskId'),\n\t\t\t\t\t\torder: index\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tRestAdapter.update(route, {tasks: taskOrder}).then(function(response) {\n\t\t\t\t\tdisplayMessage(response.message);\n\t\t\t\t});\n\n\t\t\t}\n\t\t}).disableSelection();\n\n\t}\n\n\n});"],"sourceRoot":"/source/"}